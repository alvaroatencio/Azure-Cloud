{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactory01atencio"
		},
		"azuresql_datafactory_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azuresql_datafactory'"
		},
		"dataBricks_dataFactory_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'dataBricks_dataFactory'"
		},
		"dataLake_dataFactory_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'dataLake_dataFactory'"
		},
		"tablaCategoria_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'tablaCategoria'"
		},
		"dataLake_dataFactory_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalake01atencio.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/azuresql_datafactory')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('azuresql_datafactory_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataBricks_dataFactory')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4244373735712391.11.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('dataBricks_dataFactory_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterVersion": "10.4.x-scala2.12",
					"newClusterInitScripts": [],
					"clusterOption": "Fixed"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataLake_dataFactory')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dataLake_dataFactory_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('dataLake_dataFactory_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tablaCategoria')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('tablaCategoria_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dataLake_dataFactory",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dataLake_dataFactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tablaCategorias')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azuresql_datafactory",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cod_Categoria",
						"type": "varchar"
					},
					{
						"name": "Categoria",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Categoria"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azuresql_datafactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tablaFactMine')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azuresql_datafactory",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TruckID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProjectID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OperatorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalOreMined",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalWasted",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactMine"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azuresql_datafactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tablaMine')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azuresql_datafactory",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TruckID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Truck",
						"type": "varchar"
					},
					{
						"name": "ProjectID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "OperatorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalOreMined",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalWasted",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Mine"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azuresql_datafactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tablaProducto')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azuresql_datafactory",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cod_Producto",
						"type": "varchar"
					},
					{
						"name": "Producto",
						"type": "varchar"
					},
					{
						"name": "Cod_SubCategoria",
						"type": "varchar"
					},
					{
						"name": "Color",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Producto"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azuresql_datafactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tablaSubcategoria')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azuresql_datafactory",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cod_SubCategoria",
						"type": "varchar"
					},
					{
						"name": "SubCategoria",
						"type": "varchar"
					},
					{
						"name": "Cod_Categoria",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SubCategoria"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azuresql_datafactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tablaVentasInternet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azuresql_datafactory",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cod_Producto",
						"type": "varchar"
					},
					{
						"name": "Cod_Cliente",
						"type": "varchar"
					},
					{
						"name": "Cod_Territorio",
						"type": "varchar"
					},
					{
						"name": "NumeroOrden",
						"type": "varchar"
					},
					{
						"name": "Cantidad",
						"type": "varchar"
					},
					{
						"name": "PrecioUnitario",
						"type": "varchar"
					},
					{
						"name": "CostoUnitario",
						"type": "varchar"
					},
					{
						"name": "Impuesto",
						"type": "varchar"
					},
					{
						"name": "Flete",
						"type": "varchar"
					},
					{
						"name": "FechaOrden",
						"type": "varchar"
					},
					{
						"name": "FechaEnvio",
						"type": "varchar"
					},
					{
						"name": "FechaVencimiento",
						"type": "varchar"
					},
					{
						"name": "Cod_Promocion",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "VentasInternet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azuresql_datafactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "tablaCategorias",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "tablaFactMine",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "tablaMine",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "tablaMine",
								"type": "DatasetReference"
							},
							"name": "source4"
						},
						{
							"dataset": {
								"referenceName": "tablaProducto",
								"type": "DatasetReference"
							},
							"name": "source5"
						},
						{
							"dataset": {
								"referenceName": "tablaProducto",
								"type": "DatasetReference"
							},
							"name": "source6"
						},
						{
							"dataset": {
								"referenceName": "tablaSubcategoria",
								"type": "DatasetReference"
							},
							"name": "source7"
						},
						{
							"dataset": {
								"referenceName": "tablaVentasInternet",
								"type": "DatasetReference"
							},
							"name": "source8"
						},
						{
							"dataset": {
								"referenceName": "tablaVentasInternet",
								"type": "DatasetReference"
							},
							"name": "source9"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink6"
						},
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink7"
						},
						{
							"dataset": {
								"referenceName": "output",
								"type": "DatasetReference"
							},
							"name": "sink8"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "SeleccionMine"
						},
						{
							"name": "select2"
						},
						{
							"name": "sort1"
						},
						{
							"name": "Renombrar"
						},
						{
							"name": "TotalOre"
						},
						{
							"name": "sort2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Cod_Categoria as string,",
						"          Categoria as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          TruckID as integer,",
						"          ProjectID as integer,",
						"          OperatorID as integer,",
						"          TotalOreMined as decimal(19,4),",
						"          TotalWasted as decimal(19,4),",
						"          Date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source(output(",
						"          TruckID as integer,",
						"          Truck as string,",
						"          ProjectID as integer,",
						"          Country as string,",
						"          OperatorID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Age as integer,",
						"          TotalOreMined as decimal(19,4),",
						"          TotalWasted as decimal(19,4),",
						"          Date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source3",
						"source(output(",
						"          TruckID as integer,",
						"          Truck as string,",
						"          ProjectID as integer,",
						"          Country as string,",
						"          OperatorID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Age as integer,",
						"          TotalOreMined as decimal(19,4),",
						"          TotalWasted as decimal(19,4),",
						"          Date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source4",
						"source(output(",
						"          Cod_Producto as string,",
						"          Producto as string,",
						"          Cod_SubCategoria as string,",
						"          Color as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source5",
						"source(output(",
						"          Cod_Producto as string,",
						"          Producto as string,",
						"          Cod_SubCategoria as string,",
						"          Color as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source6",
						"source(output(",
						"          Cod_SubCategoria as string,",
						"          SubCategoria as string,",
						"          Cod_Categoria as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source7",
						"source(output(",
						"          Cod_Producto as string,",
						"          Cod_Cliente as string,",
						"          Cod_Territorio as string,",
						"          NumeroOrden as string,",
						"          Cantidad as string,",
						"          PrecioUnitario as string,",
						"          CostoUnitario as string,",
						"          Impuesto as string,",
						"          Flete as string,",
						"          FechaOrden as string,",
						"          FechaEnvio as string,",
						"          FechaVencimiento as string,",
						"          Cod_Promocion as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source8",
						"source(output(",
						"          Cod_Producto as string,",
						"          Cod_Cliente as string,",
						"          Cod_Territorio as string,",
						"          NumeroOrden as string,",
						"          Cantidad as string,",
						"          PrecioUnitario as string,",
						"          CostoUnitario as string,",
						"          Impuesto as string,",
						"          Flete as string,",
						"          FechaOrden as string,",
						"          FechaEnvio as string,",
						"          FechaVencimiento as string,",
						"          Cod_Promocion as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source9",
						"source4 select(mapColumn(",
						"          Country,",
						"          TotalWasted",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source3 select(mapColumn(",
						"          Country,",
						"          FirstName,",
						"          LastName,",
						"          Age",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SeleccionMine",
						"source5 select(mapColumn(",
						"          Cod_Producto",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"source6 sort(desc(Cod_Producto, true)) ~> sort1",
						"source1 select(mapColumn(",
						"          Cod_Categoria,",
						"          Nombre_Categoria = Categoria",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Renombrar",
						"source2 select(mapColumn(",
						"          TotalOreMined",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TotalOre",
						"select1 sort(asc(Country, true)) ~> sort2",
						"source7 filter(Cod_Categoria == \"3\") ~> filter1",
						"source8 derive(IngresosNetos = (toFloat(Cantidad) * toFloat(PrecioUnitario)) - toFloat(CostoUnitario)) ~> derivedColumn1",
						"Renombrar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"SeleccionMine sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink3",
						"sort2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink4",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink6",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink7",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink8"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tablaCategorias')]",
				"[concat(variables('factoryId'), '/datasets/tablaFactMine')]",
				"[concat(variables('factoryId'), '/datasets/tablaMine')]",
				"[concat(variables('factoryId'), '/datasets/tablaProducto')]",
				"[concat(variables('factoryId'), '/datasets/tablaSubcategoria')]",
				"[concat(variables('factoryId'), '/datasets/tablaVentasInternet')]",
				"[concat(variables('factoryId'), '/datasets/output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"source4": {},
									"source5": {},
									"source6": {},
									"source7": {},
									"source8": {},
									"source9": {},
									"sink1": {},
									"sink3": {},
									"sink4": {},
									"sink6": {},
									"sink7": {},
									"sink8": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tablaFactMine",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/datasets/tablaFactMine')]",
				"[concat(variables('factoryId'), '/datasets/output')]"
			]
		}
	]
}